openapi: "3.0.0"
info:
  version: "0.0.1"
  title: "deVaulty frontend API"
  description: "Description of the API used by frontend"
servers:
  - url: "http://localhost:3300"
    description: "Local API server"
components:
  securitySchemes:
    # See https://demo.identityserver.io/ for configuration details.
    identity_server_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "https://demo.identityserver.io/connect/authorize"
          scopes:
            api: "api"
    BearerAuth:    
      type: http
      scheme: bearer
      bearerFormat: JWT    
  schemas:
    EApproveLoginOnAppStatus:
      type: string
      enum:
        - uninitialized
        - initialize
        - approved
        - rejected
    UserResponse:
      properties:
        email:
          type: string
        name:
          type: string
      required:
        - name
        - email
      additionalProperties: false
      title: UserResponse (Descope)
      type: object
    TWebSocketMessage:
      properties:
        type:
          type: string
        status:
          schema:
            type: string
            $ref: "#/components/schemas/EApproveLoginOnAppStatus"
      required:
        - type
        - status
      additionalProperties: false
      title: UserResponse (Descope)
      type: object
security:
  - identity_server_auth:
      - api
paths:
  /signup/getAccountToConnect:
    get:
      tags:
        - signup
      summary: "Search account to connect to"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                $ref: "schemas/types/TRegistrationState.yaml#/components/schemas/TAccountToConnect"
  /api/wallets:
    get:
      tags:
        - api
      summary: "Get list of wallets of the current user"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "schemas/redux/api.yaml#/components/schemas/TWallet"
  /api/getUserRoles:
    get:
      tags:
        - api
      summary: "Get the list of user roles (from the descope)"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "schemas/redux/api.yaml#/components/schemas/TUserRole"
  /api/getApprovals/:walletId:
    get:
      tags:
        - api
      summary: "Get list of approval actions for the wallet"
      parameters:
        - in: "path"
          name: "walletId"
          required: true
          schema:
            type: "string"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "schemas/redux/api.yaml#/components/schemas/TUserRole"
  /api/searchUsers:
    get:
      tags:
        - api
      summary: "Search users to give them access to the wallet. Used in the wallet creation flow"
      parameters:
        - name: email
          in: query
          type: string
          required: true
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
  /signup/connectAccount:
    post:
      tags:
        - signup
      summary: "Connect your new account with your personal key"
      parameters:
        - name: nicknameOrKeyId
          in: body
          type: string
          required: true
          schema:
            type: string
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                $ref: "schemas/types/TRegistrationState.yaml#/components/schemas/TAccountToConnect"
  /signup/createOrganization:
    post:
      tags:
        - signup
      summary: "Creating an organization"
      parameters:
        - name: loginId
          in: body
          type: string
          required: true
          description: "The login id obtained out of the descope user"
          schema:
            type: string
        - name: organizationName
          in: body
          type: string
          required: true
          schema:
            type: string
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                name: "status"
                type: number
                example: "201"
  /signup/selectAccountType:
    post:
      tags:
        - signup
      summary: "Set user account type during registration"
      parameters:
        - name: type
          in: body
          type: string
          required: true
          schema:
            example: "personal"
            type: string
            oneOf:
              - personal
              - organization
        - name: loginId
          in: body
          type: string
          required: true
          description: "The login id obtained out of the descope user"
          schema:
            type: string
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                name: "status"
                type: number
                example: "200"
  /api/balance/{walletId}:
    get:
      tags:
        - api
      summary: Get the balance
      description: Retrieves the balance of a specified wallet ID.
      parameters:
        - in: path
          name: walletId
          required: true
          schema:
            type: string
          description: The ID of the wallet to retrieve the balance for.
      responses:
        '200':
          description: Balance retrieved successfully.
        '401':
          description: Unauthorized access.

  /api/createWallet:
    post:
      tags:
        - api
      summary: "Creating a wallet"
      parameters:
        - name: walletData
          in: body
          type: object
          required: true
          schema:
            $ref: "schemas/redux/api.yaml#/components/schemas/TWalletData"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                $ref: "schemas/redux/api.yaml#/components/schemas/TWallet"

  /api/transfers:
    post:
      tags:
        - api
      summary: Send Ether
      description: Sends Ether from one address to another.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletID
                - toAddress
                - amount
                - gasLimit
                - gasPrice
              properties:
                WalletID:
                  type: string
                  description: "the wallet key, it permits to identify which wallet to use"
                toAddress:
                  type: string
                  description: "The Ethereum address to which Ether is sent."
                amount:
                  type: string
                  description: "Amount of Ether to send (in wei)."
                gasLimit:
                  type: integer
                  description: "Gas limit for the transaction."
                gasPrice:
                  type: string
                  description: "Gas price in wei per gas unit."
                nonce:
                  type: integer
                  description: "Transaction count of the from address (optional)."
      responses:
        '200':
          description: Transaction submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionHash:
                    type: string
                    description: "The hash of the submitted transaction."
        '400':
          description: Bad request.
        '402':
          description: Insufficient funds.

  /signup/approveLoginOnApp:
    post:
      tags:
        - signup
      summary: "Initialize request to approve login of the created user on mobile app"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                name: status
                type: object
                properties:
                  name:
                    type: string
                    $ref: "#/components/schemas/EApproveLoginOnAppStatus"
  ws://localhost:3300:
    post:
      tags:
        - Websocket
      summary: "getApproveLoginOnAppStatus. Get status of the login approvement in mobile app"
      responses:
        403:
          description: "Unauthorized"
        200:
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  status:
                    type: string
                    $ref: "#/components/schemas/EApproveLoginOnAppStatus"
